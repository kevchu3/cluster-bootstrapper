---

- name: Setup Base Operators
  hosts: localhost
  connection: local
  gather_facts: yes
  collections:
    - community.okd
    - community.kubernetes
    - community.general

  vars:
    state: present
  
  vars_files:
    - ../vars.yaml

  tasks:

    - name: Get Terraform Outputs
      ansible.builtin.shell:
        cmd: "terraform output -json"
        chdir: "../terraform"
      register: tf_outputs

    - name: Convert JSON output to Dictionary
      ansible.builtin.set_fact:
        terraform_outputs: "{{ tf_outputs.stdout | from_json }}"

    - name: debug
      debug:
        msg: "{{terraform_outputs}}"

    - name: debug
      debug:
        msg: "{{openshift.admin.credentials.username}}"

    - name: debug
      debug:
        msg: "{{openshift.admin.credentials.password}}"

    - name: Login to OpenShift
      ansible.builtin.shell:
        cmd: >
          oc login https://api.{{ terraform_outputs.domain.value }}:6443 \
            --username={{ openshift.admin.credentials.username }} \
            --password={{ openshift.admin.credentials.password }}
      register: login_output
      until: "'Login successful' in login_output.stdout"
      retries: 15
      delay: 30
      ignore_errors: yes
      no_log: true

    - name: Get the user token
      ansible.builtin.shell:
        cmd: oc whoami -t
      register: oc_token
      changed_when: false

    - name: Set Token
      ansible.builtin.set_fact:
        token: "{{ oc_token.stdout }}"

    - name: debug
      debug:
        msg: "{{token}}"

    ## RedHat Supported
    ## Creates OpenShift GitOps Services With Cluster-Admin Permissions
    ## Patches ArgoCD to use kustomize with helm plugin
    ## Optionally - Also installs Image-Updater
    - name: GitOps
      vars:
        domain: "{{ terraform_outputs.domain.value }}"
        api_url: "https://api.{{ terraform_outputs.domain.value }}:6443"
        validate_certs: "{{ config.validate_certs }}"
        gitops: "{{ config.gitops }}"
        workshop: "{{ config.workshop }}"
      ansible.builtin.include_role:
        name: gitops
      when:
        - config.gitops.enabled is defined
        - config.gitops.enabled is true

    - name: Secrets Management
      vars:
        domain: "{{ terraform_outputs.domain.value }}"
        api_url: "https://api.{{ terraform_outputs.domain.value }}:6443"
        validate_certs: "{{ config.validate_certs }}"
        secrets: "{{ config.secrets }}"
      ansible.builtin.import_role:
        name: secrets-manager
