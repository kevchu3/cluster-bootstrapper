---

## Install External Secrets From Helm Charts 
## AS ARGOCD APPLICATION
- name: DevHub - Install Application
  community.okd.k8s:
    host: "{{ openshift.api_url }}"
    api_key: "{{ openshift.token }}"
    validate_certs: "{{ openshift.validate_certs }}"
    state: "{{ state }}"
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: "devhub-plugin"
        namespace: "{{ openshift.services.gitops.namespace }}"
      spec:
        destination:
          namespace: "backstage"
          server: 'https://kubernetes.default.svc'
        source:
          chart: developerhub
          repoURL: "https://poc-examples.github.io/charts"
          version: v3
          targetRevision: "{{ openshift.services.devhub.chartVersion }}"
          helm:
            valuesObject:
              host: "{{ openshift.domain }}"
        project: default
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          managedNamespaceMetadata:
            labels:
              argocd.argoproj.io/managed-by: "{{ openshift.services.gitops.namespace }}"
          syncOptions:
            - CreateNamespace=true
            - Validate=false
            - SkipDryRunOnMissingResource=true

## VERIFY EXTERNAL SECRETS IS RUNNING BEFORE CONTINUING
- name: DevHub - Wait Webserver Exists
  community.kubernetes.k8s_info:
    host: "{{ openshift.api_url }}"
    api_key: "{{ openshift.token }}"
    validate_certs: "{{ openshift.validate_certs }}"
    kind: Deployment
    name: "backstage-developer-hub"  # Replace with your actual deployment name
    namespace: "backstage"  # Replace with the actual namespace
  register: devhub_webserver_status
  until:
    - devhub_webserver_status.resources | length > 0
    - devhub_webserver_status.resources[0].status.readyReplicas | default(0) == devhub_webserver_status.resources[0].status.replicas
  retries: 40
  delay: 15

## Install Tekton for pipelines
- name: DevHub - Install Tekton
  community.okd.k8s:
    host: "{{ openshift.api_url }}"
    api_key: "{{ openshift.token }}"
    validate_certs: "{{ openshift.validate_certs }}"
    state: "{{ state }}"
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: "tekton-plugin"
        namespace: "{{ openshift.services.gitops.namespace }}"
      spec:
        destination:
          namespace: "openshift-operators"
          server: 'https://kubernetes.default.svc'
        source:
          chart: tekton
          repoURL: "https://poc-examples.github.io/charts"
          version: v3
          targetRevision: 0.1.7
          # helm:
          #   valuesObject:
          #     host: "{{ openshift.domain }}"
        project: default
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          managedNamespaceMetadata:
            labels:
              argocd.argoproj.io/managed-by: "{{ openshift.services.gitops.namespace }}"
          syncOptions:
            - CreateNamespace=true
            - Validate=false
            - SkipDryRunOnMissingResource=true

## Listen for self-provisioned manifests
- name: DevHub - Self-Provisioned Config
  community.okd.k8s:
    host: "{{ openshift.api_url }}"
    api_key: "{{ openshift.token }}"
    validate_certs: "{{ openshift.validate_certs }}"
    state: "{{ state }}"
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: "self-provisioner-plugin"
        namespace: "{{ openshift.services.gitops.namespace }}"
      spec:
        destination:
          namespace: "openshift-pipelines"
          server: 'https://kubernetes.default.svc'
        source:
          repoURL: "https://gitlab.apps.{{ openshift.domain }}/self-provisioned/manifests"
          path: "."
          version: v3
          targetRevision: HEAD
          directory:
            recurse: true
          # helm:
          #   valuesObject:
          #     host: "{{ openshift.domain }}"
        project: default
        syncPolicy:
          # automated:
          #   prune: true
          #   selfHeal: true
          managedNamespaceMetadata:
            labels:
              argocd.argoproj.io/managed-by: "{{ openshift.services.gitops.namespace }}"
          syncOptions:
            - CreateNamespace=true
            - Validate=false
            - SkipDryRunOnMissingResource=true
