---

## Install External Secrets From Helm Charts 
## AS ARGOCD APPLICATION
- name: GitLab - Install Application
  community.okd.k8s:
    host: "{{ openshift.api_url }}"
    api_key: "{{ openshift.token }}"
    validate_certs: "{{ openshift.validate_certs }}"
    state: "{{ state }}"
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: "gitlab-plugin"
        namespace: "{{ openshift.services.gitops.namespace }}"
      spec:
        destination:
          namespace: "{{ openshift.services.gitlab.namespace }}"
          server: 'https://kubernetes.default.svc'
        source:
          chart: gitlab
          repoURL: "https://poc-examples.github.io/charts"
          version: v3
          targetRevision: 0.1.18
          helm:
            valuesObject:  "{{ openshift.services.gitlab.helmValues }}"
        project: default
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          managedNamespaceMetadata:
            labels:
              argocd.argoproj.io/managed-by: "{{ openshift.services.gitops.namespace }}"
          syncOptions:
            - CreateNamespace=true
            - Validate=false
            - SkipDryRunOnMissingResource=true

## VERIFY EXTERNAL SECRETS IS RUNNING BEFORE CONTINUING
- name: GitLab - Wait Webserver Exists
  community.kubernetes.k8s_info:
    host: "{{ openshift.api_url }}"
    api_key: "{{ openshift.token }}"
    validate_certs: "{{ openshift.validate_certs }}"
    kind: Deployment
    name: "gitlab-webservice-default"  # Replace with your actual deployment name
    namespace: "gitlab-system"  # Replace with the actual namespace
  register: gitlab_webserver_status
  until:
    - gitlab_webserver_status.resources | length > 0
    - gitlab_webserver_status.resources[0].status.readyReplicas | default(0) == gitlab_webserver_status.resources[0].status.replicas
  retries: 40
  delay: 15

- name: GitLab - Push GitLab Token
  community.okd.k8s:
    host: "{{ openshift.api_url }}"
    api_key: "{{ openshift.token }}"
    validate_certs: "{{ openshift.validate_certs }}"
    state: "{{ state }}"
    definition:
      apiVersion: external-secrets.io/v1alpha1
      kind: PushSecret
      metadata:
        name: "gitlab-system-secret-priming"
        namespace: gitlab-system
      spec:
        deletionPolicy: Delete
        refreshInterval: 10s
        secretStoreRefs:
          - name: eso-admin-secret-store
            kind: ClusterSecretStore
        selector:
          secret:
            name: "gitlab-gitlab-initial-root-password"
        data:
          - match:
              secretKey: "password"
              remoteRef:
                remoteKey: "gitlab"
                property: "token"
